name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --all

  release:
    name: Release artifacts
    runs-on: ${{ matrix.os }}
    needs:
      - fmt
      - clippy
      - test
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_suffix: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_suffix: linux-aarch64
            needs_cross: true
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_suffix: macos-arm64
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_suffix: macos-x86_64
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install cross toolchain
        if: matrix.needs_cross == true
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin obsctl
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      - name: Prepare archive
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/obsctl dist/
          cd dist
          tar czf obsctl-${{ github.ref_name }}-${{ matrix.artifact_suffix }}.tar.gz obsctl
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: obsctl-${{ github.ref_name }}-${{ matrix.artifact_suffix }}
          path: dist/obsctl-${{ github.ref_name }}-${{ matrix.artifact_suffix }}.tar.gz
